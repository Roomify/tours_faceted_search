<?php
/**
 * @file
 * Code for the Rooms Faceted Search feature.
 */

include_once 'tours_faceted_search.features.inc';

/**
 * Implements hook_block_info().
 */
function tours_faceted_search_block_info() {
  $blocks = array();

  $blocks['rooms_availability_search'] = array(
    'info' => t('Rooms Availability Search Form'),
    'pages' => 'booking',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'region' => 'content',
    'status' => TRUE,
    'weight' => -25,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function tours_faceted_search_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'rooms_availability_search':
      $block['subject'] = '';
      $block['content'] = drupal_get_form('tours_faceted_search_rooms_availability_search_form');
      break;
  }

  return $block;
}

/**
 * Implements hook_views_pre_view().
 */
function tours_faceted_search_views_pre_view($view, $display_id, $args) {
  if ($view->name == 'filtered_availability_search') {
    // Include the CTools tools that we need.
    ctools_include('ajax');
    ctools_include('modal');

    // Add CTools' javascript to the page.
    ctools_modal_add_js();
  }
}

/**
 * Implements hook_search_api_query_alter().
 *
 * @param SearchApiQueryInterface $query
 *   The search query being executed.
 *
 *  Modify the Search API query to take unit availability into account when our
 *  search bar is present.
 */
function tours_faceted_search_search_api_query_alter($query) {
  if ($query->getIndex()->getEntityType()) {
    $info = entity_get_info($query->getIndex()->getEntityType());

    // Only modify the query if this query is against rooms units.
    if ($info['base table'] == 'rooms_units') {
      $params = drupal_get_query_parameters();

      // See if we have dates to search.
      if (isset($params['rooms_start_date']['date']) &&
          !empty($params['rooms_start_date']['date'])) {
        $arrivalDateTime = DateTime::createFromFormat('d/m/Y', $params['rooms_start_date']['date']);
        $departureDateTime = clone $arrivalDateTime;
        $departureDateTime->add(new DateInterval('P30D'));

        $options = array();
        if (isset($params['group_size'])) {
          $options[] = array('adults' => $params['group_size']);
        }
        $agent = new AvailabilityAgent($arrivalDateTime, $departureDateTime,
          $options, 1, array(ROOMS_AVAILABLE, ROOMS_ON_REQUEST, ROOMS_NOT_AVAILABLE),
          tours_get_tour_types(),
          TRUE);
        $units = $agent->checkAvailability();

        // If no units are available, zero out results.
        if (!is_array($units)) {
          $query->condition($info['entity keys']['id'], 1, '<');
          return;
        }

        // Make array of unit IDs with availability.
        $ids = array();
        foreach ($units as $units_per_type) {
          foreach ($units_per_type as $units) {
            foreach ($units as $id => $unit) {
              $ids[] = $id;
            }
          }
        }

        // Limit the search API query to entity ids with availability.
        $query->condition($info['entity keys']['id'], $ids, 'IN');
      }
    }
  }
}

/**
 * Implements hook_block_info_alter().
 */
function tours_faceted_search_block_info_alter(&$blocks, $theme, $code_blocks) {
  foreach ($blocks['facetapi'] as &$block) {
    // Add Attributes facet API block to booking page.
    if (stristr($block['info'], 'Attributes') !== FALSE) {
      $block['status'] = 1;
      $block['weight'] = -25;
      $block['region'] = 'sidebar_first';
      $block['visibility'] = 1;
      $block['pages'] = 'booking';
    }
  }
}

/**
 * Callback for rooms_availability_search block.
 */
function tours_faceted_search_rooms_availability_search_form($form, &$form_state) {
  $params = drupal_get_query_parameters();
  $now = date_create();

  // Year defaults to current year, although we are not filtering yet.
  $default_year = $now->format('Y');

  // Month doesn't have a default selection.
  $default_month = '';

  $form['container'] = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array('container-inline'),
    ),
  );

  if (isset($params['rooms_start_date']['date']) && !empty($params['rooms_start_date']['date'])) {
    $arrivalDateTime = DateTime::createFromFormat('d/m/Y', $params['rooms_start_date']['date']);
    $arrival = $arrivalDateTime->format('Y-m-d');
    $departureDateTime = $arrivalDateTime->add(new DateInterval('P30D'));
    $departure = $departureDateTime->format('Y-m-d');
  }

  // Create unique ids and selectors for each picker.
  $start_date_id = drupal_html_id('datepicker-start-date');
  $start_date_selector = '#' . $start_date_id . ' .form-text';

  $end_date_id = drupal_html_id('datepicker-end-date');
  $end_date_selector = '#' . $start_date_id . ' .form-text';

  // Specify the default datepicker parameters (see date_popup_element_info())
  $datepicker_options = array(
    // 'dateFormat' => 'dd/mm/yy',
    // Limit bookings to X days in advance, depending on the
    // chosen configuration in your Rooms installation, defaults
    // to one day in advance.
    'minDate' => '+' . variable_get('rooms_booking_start_date', 1) . 'd',
  );

  $form['container']['arrival'] = array(
    '#prefix' => '<div class="form-wrapper rooms-date-range"><div class="start-date" id="' . $start_date_id . '">',
    '#suffix' => '</div>',
    '#type' => 'date_popup',
    '#date_format' => variable_get('rooms_date_format', 'd-m-Y'),
    '#attributes' => array('placeholder' => t('arrival')),
    '#default_value' => isset($arrival) ? $arrival : '',
    '#datepicker_options' => array_merge($datepicker_options, array('endDateSelector' => $end_date_selector)),
  );

  $group_options = array(1 => t('1 guest'));
  $group_size = variable_get('rooms_booking_manager_search_form_max_group_size', 8);
  if ($group_size > 1) {
    for ($i = 2; $i <= $group_size; $i++) {
      $group_options[$i] = $i . t(' guests');
    }
  }

  $form['container']['group_size'] = array(
    '#type' => 'select',
    '#title' => t('Group size'),
    '#options' => $group_options,
    '#default_value' => isset($params['group_size']) ? $params['group_size'] : 2,
  );

  $form['container']['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Search',
  );

  return $form;
}

/**
 * Validation handler.
 *
 * @param $form
 * @param $form_state
 */
function tours_faceted_search_rooms_availability_search_form_validate($form, $form_state) {
  if (!isset($form_state['values']['arrival'])) {
    form_set_error('arrival', t('Please enter an arrival date.'));
  }
}

/**
 * Submit handler.
 *
 * Redirects the user to search url with the selected options.
 *
 * @param $form
 * @param $form_state
 */
function tours_faceted_search_rooms_availability_search_form_submit($form, $form_state) {
  $params = drupal_get_query_parameters();

  $format = 'd/m/Y';

  // Process stay dates.
  if (isset($form_state['values']['arrival']) && !empty($form_state['values']['arrival'])) {
    $arrivalDateTime = DateTime::createFromFormat('Y-m-d', $form_state['values']['arrival']);
    $arrival = $arrivalDateTime->format($format);
    $departureDateTime = $arrivalDateTime->add(new DateInterval('P30D'));
    $departure = $departureDateTime->format($format);
  }

  // Set the URL parameters for the view.
  isset($arrival) ? $params['rooms_start_date']['date'] = $arrival : $params['rooms_start_date']['date'] = '';
  isset($departure) ? $params['rooms_end_date']['date'] = $departure : $params['rooms_end_date']['date'] = '';
  $params['group_size'] = $form_state['values']['group_size'];

  drupal_goto('booking', array('query' => $params));
}
